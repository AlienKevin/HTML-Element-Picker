{"version":3,"sources":["ElementPicker.js"],"names":["ElementPicker","[object Object]","options","this","hoverBox","document","createElement","style","position","pointerEvents","mergedOptions","container","body","selectors","background","borderWidth","transition","ignoreElements","action","Object","keys","forEach","key","trigger","addEventListener","_triggered","_redetectMouseMove","_detectMouseMove","e","_previousEvent","target","indexOf","matches","contains","hoveredElement","elementsFromPoint","clientX","clientY","_previousTarget","targetOffset","getBoundingClientRect","targetHeight","height","targetWidth","width","top","window","scrollY","left","scrollX","callback","_container","value","HTMLElement","Error","appendChild","_background","_transition","_borderWidth","_selectors","_ignoreElements","module","exports"],"mappings":"CAAA,iBACUA,EACFC,YAAYC,GAERC,KAAKC,SAAWC,SAASC,cAAc,OACvCH,KAAKC,SAASG,MAAMC,SAAW,WAC/BL,KAAKC,SAASG,MAAME,cAAgB,OAEpC,MASMC,OARFC,UAAWN,SAASO,KACpBC,UAAW,IACXC,WAAY,2BACZC,YAAa,EACbC,WAAY,iBACZC,gBAAiBZ,SAASO,MAC1BM,cAIGhB,GAEPiB,OAAOC,KAAKV,GAAeW,QAASC,IAChCnB,KAAKmB,GAAOZ,EAAcY,KAG1BnB,KAAKe,QAAUf,KAAKe,OAAOK,SAC3BlB,SAASmB,iBAAiBrB,KAAKe,OAAOK,QAAS,KAC3CpB,KAAKsB,YAAa,EAClBtB,KAAKuB,uBAIbvB,KAAKwB,iBAAmB,CAACC,IACrBzB,KAAK0B,eAAiBD,EACtB,IAAIE,EAASF,EAAEE,OAEf,IAA6C,IAAzC3B,KAAKc,eAAec,QAAQD,IAAkBA,EAAOE,QAAQ7B,KAAKU,YAClEV,KAAKQ,UAAUsB,SAASH,IACxBA,IAAW3B,KAAKC,SAAU,CAE1B,GAAI0B,IAAW3B,KAAKC,SAAU,CAE1B,MAAM8B,EAAiB7B,SAAS8B,kBAAkBP,EAAEQ,QAASR,EAAES,SAAS,GAIxE,GAAIlC,KAAKmC,kBAAoBJ,EAEzB,OAEAJ,EAASI,OAGb/B,KAAKmC,gBAAkBR,EAE3B,MAAMS,EAAeT,EAAOU,wBACtBC,EAAeF,EAAaG,OAC5BC,EAAcJ,EAAaK,MAEjCzC,KAAKC,SAASG,MAAMqC,MAAQD,EAAiC,EAAnBxC,KAAKY,YAAkB,KACjEZ,KAAKC,SAASG,MAAMmC,OAASD,EAAkC,EAAnBtC,KAAKY,YAAkB,KAEnEZ,KAAKC,SAASG,MAAMsC,IAAMN,EAAaM,IAAMC,OAAOC,QAAU5C,KAAKY,YAAc,KACjFZ,KAAKC,SAASG,MAAMyC,KAAOT,EAAaS,KAAOF,OAAOG,QAAU9C,KAAKY,YAAc,KAC/EZ,KAAKsB,YAActB,KAAKe,OAAOgC,WAC/B/C,KAAKe,OAAOgC,SAASpB,GACrB3B,KAAKsB,YAAa,QAItBtB,KAAKC,SAASG,MAAMqC,MAAQ,IAGpCvC,SAASmB,iBAAiB,YAAarB,KAAKwB,kBAEhDhB,gBACI,OAAOR,KAAKgD,WAEhBxC,cAAcyC,GACV,KAAIA,aAAiBC,aAIjB,MAAM,IAAIC,MAAM,+CAHhBnD,KAAKgD,WAAaC,EAClBjD,KAAKQ,UAAU4C,YAAYpD,KAAKC,UAKxCU,iBACI,OAAOX,KAAKqD,YAEhB1C,eAAesC,GACXjD,KAAKqD,YAAcJ,EAEnBjD,KAAKC,SAASG,MAAMO,WAAaX,KAAKW,WAE1CE,iBACI,OAAOb,KAAKsD,YAEhBzC,eAAeoC,GACXjD,KAAKsD,YAAcL,EAEnBjD,KAAKC,SAASG,MAAMS,WAAab,KAAKa,WAE1CD,kBACI,OAAOZ,KAAKuD,aAEhB3C,gBAAgBqC,GACZjD,KAAKuD,aAAeN,EAEpBjD,KAAKuB,qBAETb,gBACI,OAAOV,KAAKwD,WAEhB9C,cAAcuC,GACVjD,KAAKwD,WAAaP,EAElBjD,KAAKuB,qBAETT,qBACI,OAAOd,KAAKyD,gBAEhB3C,mBAAmBmC,GACfjD,KAAKyD,gBAAkBR,EAEvBjD,KAAKuB,qBAETzB,qBACQE,KAAKwB,kBAAoBxB,KAAK0B,gBAC9B1B,KAAKwB,iBAAiBxB,KAAK0B,iBAKjB,oBAAXgC,aAAoD,IAAnBA,OAAOC,QAC/CD,OAAOC,QAAU9D,EAEjB8C,OAAO9C,cAAgBA,EAxI/B","file":"ElementPicker.js","sourcesContent":["(function () {\r\n    class ElementPicker {\r\n        constructor(options) {\r\n            // MUST create hover box first before applying options\r\n            this.hoverBox = document.createElement(\"div\");\r\n            this.hoverBox.style.position = \"absolute\";\r\n            this.hoverBox.style.pointerEvents = \"none\";\r\n\r\n            const defaultOptions = {\r\n                container: document.body,\r\n                selectors: \"*\", // default to pick all elements\r\n                background: \"rgba(153, 235, 255, 0.5)\", // transparent light blue\r\n                borderWidth: 5,\r\n                transition: \"all 150ms ease\", // set to \"\" (empty string) to disable\r\n                ignoreElements: [document.body],\r\n                action: {},\r\n            }\r\n            const mergedOptions = {\r\n                ...defaultOptions,\r\n                ...options\r\n            };\r\n            Object.keys(mergedOptions).forEach((key) => {\r\n                this[key] = mergedOptions[key];\r\n            });\r\n\r\n            if (this.action && this.action.trigger) {\r\n                document.addEventListener(this.action.trigger, () => {\r\n                    this._triggered = true;\r\n                    this._redetectMouseMove();\r\n                });\r\n            }\r\n\r\n            this._detectMouseMove = (e) => {\r\n                this._previousEvent = e;\r\n                let target = e.target;\r\n                // console.log(\"TCL: ElementPicker -> this._moveHoverBox -> target\", target)\r\n                if (this.ignoreElements.indexOf(target) === -1 && target.matches(this.selectors) &&\r\n                    this.container.contains(target) ||\r\n                    target === this.hoverBox) { // is NOT ignored elements\r\n                    // console.log(\"TCL: target\", target);\r\n                    if (target === this.hoverBox) {\r\n                        // the truely hovered element behind the added hover box\r\n                        const hoveredElement = document.elementsFromPoint(e.clientX, e.clientY)[1];\r\n                        // console.log(\"screenX: \" + e.screenX);\r\n                        // console.log(\"screenY: \" + e.screenY);\r\n                        // console.log(\"TCL: hoveredElement\", hoveredElement);\r\n                        if (this._previousTarget === hoveredElement) {\r\n                            // avoid repeated calculation and rendering\r\n                            return;\r\n                        } else {\r\n                            target = hoveredElement;\r\n                        }\r\n                    } else {\r\n                        this._previousTarget = target;\r\n                    }\r\n                    const targetOffset = target.getBoundingClientRect();\r\n                    const targetHeight = targetOffset.height;\r\n                    const targetWidth = targetOffset.width;\r\n\r\n                    this.hoverBox.style.width = targetWidth + this.borderWidth * 2 + \"px\";\r\n                    this.hoverBox.style.height = targetHeight + this.borderWidth * 2 + \"px\";\r\n                    // need scrollX and scrollY to account for scrolling\r\n                    this.hoverBox.style.top = targetOffset.top + window.scrollY - this.borderWidth + \"px\";\r\n                    this.hoverBox.style.left = targetOffset.left + window.scrollX - this.borderWidth + \"px\";\r\n                    if (this._triggered && this.action.callback) {\r\n                        this.action.callback(target);\r\n                        this._triggered = false;\r\n                    }\r\n                } else {\r\n                    // console.log(\"hiding hover box...\");\r\n                    this.hoverBox.style.width = 0;\r\n                }\r\n            };\r\n            document.addEventListener(\"mousemove\", this._detectMouseMove);\r\n        }\r\n        get container() {\r\n            return this._container;\r\n        }\r\n        set container(value) {\r\n            if (value instanceof HTMLElement) {\r\n                this._container = value;\r\n                this.container.appendChild(this.hoverBox);\r\n            } else {\r\n                throw new Error(\"Please specify an HTMLElement as container!\");\r\n            }\r\n        }\r\n        get background() {\r\n            return this._background;\r\n        }\r\n        set background(value) {\r\n            this._background = value;\r\n\r\n            this.hoverBox.style.background = this.background;\r\n        }\r\n        get transition() {\r\n            return this._transition;\r\n        }\r\n        set transition(value) {\r\n            this._transition = value;\r\n\r\n            this.hoverBox.style.transition = this.transition;\r\n        }\r\n        get borderWidth() {\r\n            return this._borderWidth;\r\n        }\r\n        set borderWidth(value) {\r\n            this._borderWidth = value;\r\n\r\n            this._redetectMouseMove();\r\n        }\r\n        get selectors() {\r\n            return this._selectors;\r\n        }\r\n        set selectors(value) {\r\n            this._selectors = value;\r\n\r\n            this._redetectMouseMove();\r\n        }\r\n        get ignoreElements() {\r\n            return this._ignoreElements;\r\n        }\r\n        set ignoreElements(value) {\r\n            this._ignoreElements = value;\r\n\r\n            this._redetectMouseMove();\r\n        }\r\n        _redetectMouseMove() {\r\n            if (this._detectMouseMove && this._previousEvent) {\r\n                this._detectMouseMove(this._previousEvent);\r\n            }\r\n        }\r\n    }\r\n    // export module\r\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\r\n        module.exports = ElementPicker;\r\n    } else {\r\n        window.ElementPicker = ElementPicker;\r\n    }\r\n})();"]}